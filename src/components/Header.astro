---
import ToggleTheme from "./ToggleTheme.astro";

const navItems = [
  {
    title: "Experiencia",
    label: "experiencia",
    url: "#experiencia",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "#proyectos",
  },
  {
    title: "sobre mí",
    label: "sobre-mi",
    url: "#sobre-mi",
  },
];
---

<header
  class="flex justify-center gap-y-10 items-center
  py-3 px-4
  w-full max-w-[850px]
  mx-auto s
  sticky top-0"
>
  <nav
    class="flex flex-row justify-between gap-x-2
    opacity-80
    rounded-4xl
    py-2 px-4
    bg-white border-amber-100
    backdrop-blur-3xl
    font-bold
    text-sm
    dark:bg-sky-900 border dark:border-none
    sm:gap-x-2.5 sm:text-base"
  >
    {
      navItems.map((link) => (
        <a
          class="hover:text-sky-600 dark:hover:text-yellow-300"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
    <ToggleTheme />
  </nav>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const CLASSES = ["text-blue-600", "dark:text-yellow-300"];

    // Función para limpiar todos los estados de los enlaces
    const deactivateAllLinks = () => {
      navItems.forEach((item) => {
        item.classList.add(...CLASSES);
        item.classList.remove(...CLASSES);
      });
    };

    const callback = (entries: any[]) => {
      // Optimización: Si al menos una sección ha cruzado el umbral
      let activeSectionFound = false;

      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // 1. Limpiamos todos los enlaces ANTES de activar el actual.
          //    Esto asegura que solo UNO esté activo a la vez.
          deactivateAllLinks();

          const targetId = entry.target.id;

          // 2. Buscamos el enlace correspondiente usando el atributo 'aria-label'
          const currentLink = document.querySelector(
            `a[aria-label="${targetId}"]`,
          );

          if (currentLink) {
            currentLink.classList.remove(...CLASSES);
            currentLink.classList.add(...CLASSES);
            activeSectionFound = true;
          }
        }
      });

      // 3. Solución para el bug del TOP: Si no se encuentra ninguna sección activa
      //    (lo cual puede ocurrir si el top está entre secciones), activamos forzosamente el primer enlace.
      if (!activeSectionFound && window.scrollY < 10) {
        // Menos de 10px de scroll
        const firstLink = navItems[0];
        if (firstLink) {
          deactivateAllLinks();
          firstLink.classList.remove(...CLASSES);
          firstLink.classList.add(...CLASSES);
        }
      }
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      // Centra el área de detección en el 50% de la pantalla para evitar bugs de threshold
      rootMargin: "-50% 0px -50% 0px",
      threshold: 0,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });
  });
</script>
